--- origsrc/anjuta-2.26.1.0/configure.in	2009-04-14 03:11:20.000000000 -0500
+++ src/anjuta-2.26.1.0/configure.in	2009-04-22 01:52:04.811875000 -0500
@@ -104,7 +104,7 @@ AC_SUBST(AM_CXXFLAGS)
 
 ANJUTA_LDFLAGS="-no-undefined"
 ANJUTA_PLUGIN_LDFLAGS="-module -avoid-version -no-undefined"
-AC_SUBST(ANJUTA_LDFLAG)
+AC_SUBST(ANJUTA_LDFLAGS)
 AC_SUBST(ANJUTA_PLUGIN_LDFLAGS)
 
 dnl Disable deprecated APIs
--- origsrc/anjuta-2.26.1.0/plugins/file-manager/Makefile.am	2009-03-18 03:24:07.000000000 -0500
+++ src/anjuta-2.26.1.0/plugins/file-manager/Makefile.am	2009-04-22 18:24:40.858750000 -0500
@@ -51,6 +51,8 @@ libfile_manager_la_SOURCES = \
 	file-model.c \
 	file-model.h
 
+libfile_manager_la_LDFLAGS = $(ANJUTA_PLUGIN_LDFLAGS)
+
 # Plugin dependencies
 libfile_manager_la_LIBADD = \
 	$(LIBANJUTA_LIBS) \
--- origsrc/anjuta-2.26.1.0/plugins/gbf-am/gbf-am-project.c	2009-03-18 03:25:08.000000000 -0500
+++ src/anjuta-2.26.1.0/plugins/gbf-am/gbf-am-project.c	2009-04-22 17:05:59.202500000 -0500
@@ -3773,7 +3773,7 @@ gbf_am_project_get_property (GObject    
 	}
 }
 
-GbfProject *
+G_MODULE_EXPORT GbfProject *
 gbf_am_project_new (void)
 {
 	return GBF_PROJECT (g_object_new (GBF_TYPE_AM_PROJECT, NULL));
--- origsrc/anjuta-2.26.1.0/plugins/project-wizard/autogen.c	2009-03-18 03:24:06.000000000 -0500
+++ src/anjuta-2.26.1.0/plugins/project-wizard/autogen.c	2009-04-22 19:18:39.765000000 -0500
@@ -86,7 +86,7 @@ struct _NPWAutogen
 
 /* Check if autogen version 5 is present */
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_check_autogen (void)
 {
 	gchar* args[] = {"autogen", "-v", NULL};
@@ -136,7 +136,7 @@ cb_autogen_write_definition (const gchar
 	}
 }
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_autogen_write_definition_file (NPWAutogen* this, GHashTable* values)
 {
 	FILE* def;
@@ -159,7 +159,7 @@ npw_autogen_write_definition_file (NPWAu
 /* Set input and output
  *---------------------------------------------------------------------------*/
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_autogen_set_input_file (NPWAutogen* this, const gchar* filename, const gchar* start_marker, const gchar* end_marker)
 {
 	FILE* tpl;
@@ -236,7 +236,7 @@ npw_autogen_set_input_file (NPWAutogen* 
 	return ok;
 }	
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_autogen_set_output_file (NPWAutogen* this, const gchar* filename)
 {
 	/* Autogen should not be running */
@@ -248,7 +248,7 @@ npw_autogen_set_output_file (NPWAutogen*
 	return TRUE;
 }
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_autogen_set_output_callback (NPWAutogen* this, NPWAutogenOutputFunc func, gpointer user_data)
 {
 	/* Autogen should not be running */
@@ -306,7 +306,7 @@ on_autogen_terminated (AnjutaLauncher* l
 	}
 }
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_autogen_execute (NPWAutogen* this, NPWAutogenFunc func, gpointer data, GError** error) 
 {
 	gchar* args[] = {"autogen", "-T", NULL, NULL, NULL};
@@ -364,7 +364,7 @@ npw_autogen_execute (NPWAutogen* this, N
 /* Creation and Destruction
  *---------------------------------------------------------------------------*/
 
-NPWAutogen* npw_autogen_new (void)
+G_MODULE_EXPORT NPWAutogen* npw_autogen_new (void)
 {
 	NPWAutogen* this;
 
@@ -380,7 +380,7 @@ NPWAutogen* npw_autogen_new (void)
 	return this;
 }
 
-void npw_autogen_free (NPWAutogen* this)
+G_MODULE_EXPORT void npw_autogen_free (NPWAutogen* this)
 {
 	g_return_if_fail(this != NULL);
 
--- origsrc/anjuta-2.26.1.0/plugins/project-wizard/values.c	2009-03-18 03:24:06.000000000 -0500
+++ src/anjuta-2.26.1.0/plugins/project-wizard/values.c	2009-04-22 19:27:09.233750000 -0500
@@ -34,6 +34,7 @@
 #include "values.h"
 
 #include <string.h>
+#include <gmodule.h>
 
 /*---------------------------------------------------------------------------*/
 
@@ -70,7 +71,7 @@ npw_value_free (NPWValue *value)
 	g_slice_free (NPWValue, value);
 }
 	
-GHashTable*
+G_MODULE_EXPORT GHashTable*
 npw_value_heap_new (void)
 {
 	GHashTable* hash;
@@ -80,7 +81,7 @@ npw_value_heap_new (void)
 	return hash;
 }
 
-void
+G_MODULE_EXPORT void
 npw_value_heap_free (GHashTable* hash)
 {
 	/* GSList* node; */
@@ -94,7 +95,7 @@ npw_value_heap_free (GHashTable* hash)
 
 /* Return key corresponding to name, create key if it doesn't exist */
 
-NPWValue*
+G_MODULE_EXPORT NPWValue*
 npw_value_heap_find_value (GHashTable* hash, const gchar* name)
 {
 	NPWValue* node;
@@ -111,7 +112,7 @@ npw_value_heap_find_value (GHashTable* h
 	return node;
 }
 
-void
+G_MODULE_EXPORT void
 npw_value_heap_foreach_value (GHashTable* hash, GHFunc func, gpointer user_data)
 {
 	g_hash_table_foreach (hash, func, user_data);
@@ -120,7 +121,7 @@ npw_value_heap_foreach_value (GHashTable
 /* Access value attributes
  *---------------------------------------------------------------------------*/
 
-const gchar*
+G_MODULE_EXPORT const gchar*
 npw_value_get_name ( const NPWValue* node)
 {
 	g_return_val_if_fail (node != NULL, NULL);
@@ -130,7 +131,7 @@ npw_value_get_name ( const NPWValue* nod
 
 /* set new value, return FALSE if value has not changed */
 
-gboolean
+G_MODULE_EXPORT gboolean
 npw_value_set_value (NPWValue* node, const gchar* value, NPWValueTag tag)
 {
 	gboolean change = FALSE;
@@ -184,7 +185,7 @@ npw_value_set_value (NPWValue* node, con
 	return change;
 }
 
-const gchar*
+G_MODULE_EXPORT const gchar*
 npw_value_get_value (const NPWValue* node)
 {
 	g_return_val_if_fail (node != NULL, NULL);
@@ -192,7 +193,7 @@ npw_value_get_value (const NPWValue* nod
 	return node->tag == NPW_EMPTY_VALUE ? NULL : node->value;
 }
 
-NPWValueTag
+G_MODULE_EXPORT NPWValueTag
 npw_value_get_tag (const NPWValue* node)
 {
 	g_return_val_if_fail (node != NULL, NPW_EMPTY_VALUE);
